apt-get install python3

pip install json
pip install opencv-python
pip install mediapipe

import json
import cv2
import mediapipe as mp

# Mediapipe Hands 모듈 로드
mp_drawing = mp.solutions.drawing_utils
mp_hands = mp.solutions.hands

# 트랙바 이벤트 핸들러 함수
def onChange(pos):
    cap.set(cv2.CAP_PROP_POS_FRAMES, pos)

# 비디오에서 손을 감지하는 함수
def detect_hands_in_video(cap):
    landmarks_data_left = [[] for _ in range(21)]  # 21개의 랜드마크를 가집니다.
    landmarks_data_right = [[] for _ in range(21)]  # 21개의 랜드마크를 가집니다.

    with mp_hands.Hands(min_detection_confidence=0.5, min_tracking_confidence=0.5, max_num_hands=2) as hands:
        while cap.isOpened():
            position = cv2.getTrackbarPos('Position', 'MediaPipe Hands')
            cap.set(cv2.CAP_PROP_POS_FRAMES, position)
            ret, frame = cap.read()
            if not ret:
                break

            # BGR 이미지를 RGB로 변환합니다.
            image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # 이미지를 처리하고 손 랜드마크를 찾습니다.
            results = hands.process(image)

            # 이미지에 손 랜드마크를 그립니다.
            if results.multi_hand_landmarks:
                hands_count = len(results.multi_hand_landmarks)
                for hand_landmarks in results.multi_hand_landmarks:
                    mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

                for id in range(21):  # 각 랜드마크에 대해
                    if hands_count == 2:
                        # 두 손이 감지된 경우
                        if results.multi_hand_landmarks[0].landmark[0].x > results.multi_hand_landmarks[1].landmark[0].x:
                            left_hand = results.multi_hand_landmarks[0]
                            right_hand = results.multi_hand_landmarks[1]
                        else:
                            left_hand = results.multi_hand_landmarks[1]
                            right_hand = results.multi_hand_landmarks[0]
                            
                        coordinate_left = [left_hand.landmark[id].x, left_hand.landmark[id].y, left_hand.landmark[id].z]
                        coordinate_right = [right_hand.landmark[id].x, right_hand.landmark[id].y, right_hand.landmark[id].z]
                        landmarks_data_left[id].append(coordinate_left)
                        landmarks_data_right[id].append(coordinate_right)
                        
                    elif hands_count == 1:  
                        # 한 손만 감지된 경우
                        if results.multi_hand_landmarks[0].landmark[4].x < results.multi_hand_landmarks[0].landmark[20].x:
                            coordinate_right = [results.multi_hand_landmarks[0].landmark[id].x, results.multi_hand_landmarks[0].landmark[id].y, results.multi_hand_landmarks[0].landmark[id].z]
                            landmarks_data_right[id].append(coordinate_right)
                            landmarks_data_left[id].append([])
                        else:
                            coordinate_left = [results.multi_hand_landmarks[0].landmark[id].x, results.multi_hand_landmarks[0].landmark[id].y, results.multi_hand_landmarks[0].landmark[id].z]
                            landmarks_data_left[id].append(coordinate_left)
                            landmarks_data_right[id].append([])
                            
                    else: 
                        # 손이 감지되지 않은 경우
                        landmarks_data_left[id].append([])
                        landmarks_data_right[id].append([])
                        
            else:  # 손이 감지되지 않은 경우
                for id in range(21):
                    landmarks_data_left[id].append([])
                    landmarks_data_right[id].append([])

            cv2.imshow('MediaPipe Hands', frame)
            cv2.setTrackbarPos('Position', 'MediaPipe Hands', int(cap.get(cv2.CAP_PROP_POS_FRAMES)))
            if cv2.waitKey(5) & 0xFF == 27:
                break

    # JSON 파일로 데이터를 저장합니다.
    for id, data in enumerate(landmarks_data_left):
        with open(f'C:/Users/seungyeon0510/Desktop/jjii/mediapiejson/landmarks_data_left_{id}.json', 'w') as f:
            json.dump(data, f)

    for id, data in enumerate(landmarks_data_right):
        with open(f'C:/Users/seungyeon0510/Desktop/jjii/mediapiejson//landmarks_data_right_{id}.json', 'w') as f:
            json.dump(data, f)

    cv2.destroyAllWindows()

# 비디오 경로를 설정합니다.
cap = cv2.VideoCapture("C:/Users/seungyeon0510/Desktop/jjii/handsample.mp4")
cv2.namedWindow('MediaPipe Hands')
total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
cv2.createTrackbar('Position', 'MediaPipe Hands', 0, total_frames, onChange)
detect_hands_in_video(cap)
cap.release()


















////

import os
import json
import numpy as np
import matplotlib.pyplot as plt

# 입력 폴더 경로
input_folder = 'C:/Users/seungyeon0510/Desktop/jjii/mediapiejson'

# 모든 좌표 데이터 저장
all_coords = []

# 폴더 내 모든 JSON 파일 순회
for filename in os.listdir(input_folder):
    if filename.endswith('.json'):
        with open(os.path.join(input_folder, filename), 'r') as f:
            data = json.load(f)
            for coords in data:
                if coords:
                    all_coords.append(tuple(coords))

# 좌표 데이터를 numpy 배열로 변환
coords_array = np.array(all_coords)

# 좌표 데이터의 최솟값과 최댓값 구하기
x_min, y_min, z_min = np.min(coords_array, axis=0)
x_max, y_max, z_max = np.max(coords_array, axis=0)

# 좌표 데이터 정규화
coords_array[:, 0] = (coords_array[:, 0] - x_min) / (x_max - x_min)
coords_array[:, 1] = (coords_array[:, 1] - y_min) / (y_max - y_min)
coords_array[:, 2] = (coords_array[:, 2] - z_min) / (z_max - z_min)

# 2D 히스토그램 생성
hist, xedges, yedges = np.histogram2d(coords_array[:, 0], coords_array[:, 1], bins=100)

# 히스토그램 시각화
plt.figure(figsize=(8, 8))
plt.imshow(hist.T, cmap='gray', extent=[0, 1, 0, 1])
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Gray Scale Visualization of Coordinate Data')
plt.show()
